# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
name: docker-php-sample-80-multistage
services:
  server:
    container_name: server-php-sample
    build:
      context: .
      # Target the production/development stage
      # target: production
      target: development
    # Load env variables from .env file
    # env_file:
    #   - ./src/.env
    ports:
      - 8085:80

    # We are using MariaDB (https://hub.docker.com/_/mariadb)
    depends_on:
      - db
      # db:
      #   condition: service_healthy
    secrets:
      - db-password
      - email-password
    environment:
      # - DB_PASSWORD_FILE_PATH=/run/secrets/db-password
      # - EMAIL_PASSWORD_FILE_PATH=/run/secrets/email-password
      - DB_PASSWORD_FILE_PATH=secrets/db_password.txt
      - EMAIL_PASSWORD_FILE_PATH=secrets/email_password.txt
      - DB_HOST=db
      - DB_NAME=example
      - DB_USER=root
      - ENV_EXAMPLE=set_in_compose.yaml

    # Use Compose Watch to automatically update your running Compose services as
    # you edit and save your code (https://docs.docker.com/compose/file-watch/)
    develop:
      watch:
        - action: sync
          path: ./src
          target: /var/www/html
  db:
    image: mariadb:10.3
    # always: Always restart the container if it stops.
    # unless-stopped: Always restart the container unless it was stopped arbitrarily,
    # or by the Docker daemon
    restart: unless-stopped
    user: root
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
      - .DB:/docker-entrypoint-initdb.d
    environment:
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db-password
      - MARIADB_DATABASE=example
    expose:
      - 3306
    # This healthckeck works with MariaDB 10.4
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "/usr/local/bin/healthcheck.sh",
    #       "--su-mysql",
    #       "--connect",
    #       "--innodb_initialized",
    #     ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  # Service for phpMyAdmin (https://hub.docker.com/_/phpmyadmin)
  phpmyadmin:
    image: phpmyadmin
    ports:
      - 8086:80
    depends_on:
      - db
    environment:
      - PMA_HOST=db
volumes:
  db-data:
secrets:
  db-password:
    file: src/secrets/db_password.txt
  email-password:
    file: src/secrets/email_password.txt

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker-compose up`.
  #     depends_on:
  #       db:
  #         condition: service_healthy
  #   db:
  #     image: postgres
  #     restart: always
  #     user: postgres
  #     secrets:
  #       - db-password
  #     volumes:
  #       - db-data:/var/lib/postgresql/data
  #     environment:
  #       - POSTGRES_DB=example
  #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
  #     expose:
  #       - 5432
  #     healthcheck:
  #       test: [ "CMD", "pg_isready" ]
  #       interval: 10s
  #       timeout: 5s
  #       retries: 5
  # volumes:
  #   db-data:
  # secrets:
  #   db-password:
  #     file: db/password.txt
